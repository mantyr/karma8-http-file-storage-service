syntax = "proto3";

package karma8.discovery.servers.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "karma8-discovery/servers/server.proto";
import "karma8-discovery/subjects/subject.proto";

option go_package = "github.com/mantyr/karma8-http-file-storage-service/api/karma8-discovery/servers";

service ServerService {
  // Add добавляет информацию о новом сервере хранения файлов
  rpc Add(AddRequest) returns (AddResponse) {
    option (google.api.http) = {
      post: "/api/v1/servers"
      body: "*"
    };
  }
  // List возвращает список всех зарегистрированных серверов
  rpc List(ListRequest) returns (ListResponse) {
    option (google.api.http) = {
      get: "/api/v1/servers"
    };
  }
  // ListForNextFile возвращает список серверов, наиболее подходящих для хранения следующего файла
  rpc ListForNextFile(ListForNextFileRequest) returns (ListResponse) {
    option (google.api.http) = {
      get: "/api/v1/servers/list-for-next-file"
    };
  }
  // Get возвращает информацию о сервере
  rpc Get(GetRequest) returns (GetResponse) {
    option (google.api.http) = {
      get: "/api/v1/servers/{server_id}"
    };
  }
  // Enable включает доступность сервера для использования
  rpc Enable(EnableRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/api/v1/servers/{server_id}/enable"
    };
  }
  // Disable отключает доступность сервера для использования
  rpc Disable(DisableRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/api/v1/servers/{server_id}/disable"
    };
  }
  // Delete удаляет информацию о сервере
  rpc Delete(DeleteRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/servers/{server_id}"
    };
  }
}

// AddRequest это запрос на добавление информации о новом сервере хранения файлов
message AddRequest {
  // ServerID это идентификатор сервера
  string server_id = 1;

  // Host это адрес по которому отвечает сервер
  string host = 2;

  // Port это порт по которому отвечает сервер
  int32 port = 3;

  // Creator это информация о субъекте который создал запись
  karma8.discovery.subjects.v1.Subject creator = 4;
}

// AddResponse это ответ на запрос на добавление информации о новом сервере
message AddResponse {}

// ListRequest это запрос всех зарегистрированных серверов
message ListRequest {}

// ListForNextFileRequest это запрос списка серверов подходящих для хранения следующего файла
message ListForNextFileRequest {
	int32 quantity = 1;
}

// ListResponse это ответ на запрос всех зарегистрированных серверов
message ListResponse {
  repeated Server servers = 1;
}

// GetRequest это запрос на получение информации о сервере
message GetRequest {
  // ServerID это идентификатор сервера
  string server_id = 1;
}

// GerResponse это ответ на запрос на получение информации о сервере
message GetResponse {
  // Server это информация о сервере
  Server server = 1;
}

// EnableRequest это запрос на включение доступности ранее выключенного сервера
message EnableRequest {
  // ServerID это идентификатор сервера
  string server_id = 1;

  // Updater это информация о субъекте который внёс последнии изменения в запись
  karma8.discovery.subjects.v1.Subject updater = 2;
}

// DisableRequest это запрос на выключение доступности сервера
message DisableRequest {
  // ServerID это идентификатор сервера
  string server_id = 1;

  // Updater это информация о субъекте который внёс последнии изменения в запись
  karma8.discovery.subjects.v1.Subject updater = 2;
}

// DeleteRequest это запрос на удаление информации о сервере
message DeleteRequest {
  // ServerID это идентификатор сервера
  string server_id = 1;

  // Updater это информация о субъекте который внёс последнии изменения в запись
  karma8.discovery.subjects.v1.Subject updater = 2;
}
